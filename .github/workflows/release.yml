on:
  push:
    paths:
      - 'VERSION'
    branches:
      - main

name: Create Release

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Read version number
        id: getversion
        run: echo "::set-output name=version::$(cat VERSION)"
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - name: Read ChangeLog
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          python3 "${GITHUB_WORKSPACE}/.github/get-unreleased-changelog.py" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Get author info
        id: author
        run: |
          echo "::set-output name=name::$(git log -n 1 --pretty=format:%an)"
          echo "::set-output name=email::$(git log -n 1 --pretty=format:%ae)"
      - name: Edit ChangeLog
        run: |
          python3 "${GITHUB_WORKSPACE}/.github/update-changelog-on-release.py" ${{ steps.getversion.outputs.version }} ${{ steps.date.outputs.date }}
#      - name: Edit last commit
#        run: |
#          # Configure git
#          git config user.name "$(git log -n 1 --pretty=format:%an)"
#          git config user.email "$(git log -n 1 --pretty=format:%ae)"
#          # Stash changes made to CHANGELOG
#          git stash
#          # Roll back git history to before last commit
#          # This also adds all changes in the last commit to the working tree
#          git reset --soft HEAD~1
#          # Apply stashed changed
#          git stash apply
#          # Add build files to working tree
#          git add CHANGELOG.md
#          # Commit changes and CHANGELOG files using same commit info as before
#          git commit -C HEAD@{1}
#          # Force push to overwrite git history
#          git push --force
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Automated update of changelog for release ${{ steps.getversion.outputs.version }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 'v${{ steps.getversion.outputs.version }}'
          release_name: Release ${{ steps.getversion.outputs.version }}
          draft: false
          prerelease: false
          body: ${{ env.CHANGELOG }}
